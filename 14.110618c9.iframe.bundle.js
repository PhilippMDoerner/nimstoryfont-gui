"use strict";(self.webpackChunknimstoryfont_gui=self.webpackChunknimstoryfont_gui||[]).push([[14],{"./src/app/_models/encounter.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>EncounterObject});class EncounterObject{constructor(object){this.orderIndexIncrement=10,object&&Object.assign(this,object)}hasShiftedOrderIndex(){return this.order_index%this.orderIndexIncrement>0}getShiftedOrderIndex(){return this.hasShiftedOrderIndex()?this.order_index:this.order_index+1}getUnshiftedOrderIndex(){return Math.floor(this.order_index/this.orderIndexIncrement)*this.orderIndexIncrement}unshiftOrderIndex(){this.order_index=this.getUnshiftedOrderIndex()}swapOrderIndexState(){this.hasShiftedOrderIndex()?this.unshiftOrderIndex():this.shiftOrderIndex()}shiftOrderIndex(){this.order_index++}nextOrderIndex(){return this.getUnshiftedOrderIndex()+this.orderIndexIncrement}priorOrderIndex(){return this.getUnshiftedOrderIndex()-this.orderIndexIncrement}}},"./src/app/_services/formly/formly-service.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>FormlyService});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js");const environment={kind:"PRODUCTION",backendDomain:"https://www.aldrune.com",apiUrl:"https://www.aldrune.com/wiki1/api",defaultTitle:"StoryFont"};var _class,http=__webpack_require__("./node_modules/@angular/common/fesm2020/http.mjs");let BaseService=(_class=class BaseService{constructor(http,baseUrl){this.http=http,this.apiUrl=environment.apiUrl,this.baseUrl=`${this.apiUrl}/${baseUrl}`}list(){return this.http.get(`${this.baseUrl}/`).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}campaignList(campaign){return this.http.get(`${this.baseUrl}/${campaign}/overview/`).pipe((0,map.U)((entries=>entries.map((entry=>this.parseOverviewEntity(entry))))))}campaignDetailList(campaign){return this.http.get(`${this.baseUrl}/${campaign}/`).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}create(data){return this.http.post(`${this.baseUrl}/`,data).pipe((0,map.U)((entry=>this.parseEntity(entry))))}update(pk,data){return this.http.put(`${this.baseUrl}/pk/${pk}/`,data).pipe((0,map.U)((entry=>this.parseEntity(entry))))}read(pk){return this.http.get(`${this.baseUrl}/pk/${pk}/`).pipe((0,map.U)((entry=>this.parseEntity(entry))))}readByParam(campaign,params){if("string"!=typeof params.name)throw console.error("The params you used in the service"),console.error(params),'Invalid params exception. You tried to use the base readByParams of GenericService with a parameter \n      object without the "name" attribute. This indicates your call is more complex than \n      this base implementation is useful for. Overwrite readByParam in the service that inherits from  \n      GenericObjectService and implement the function yourself';return this.http.get(`${this.baseUrl}/${campaign}/${params.name}/`).pipe((0,map.U)((entry=>this.parseEntity(entry))))}delete(pk){return this.http.delete(`${this.baseUrl}/pk/${pk}/`)}patch(pk,data){return this.http.patch(`${this.baseUrl}/pk/${pk}/`,data).pipe((0,map.U)((entry=>this.parseEntity(entry))))}},_class.ctorParameters=()=>[{type:http.eN},{type:String}],_class);BaseService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],BaseService);var character_service_class,routing_service=__webpack_require__("./src/app/_services/routing.service.ts");let CharacterService=(character_service_class=class CharacterService extends BaseService{constructor(routingService,http){super(http,"character"),this.routingService=routingService}getPlayerCharacters(campaign){const url=`${this.baseUrl}/${campaign}/playercharacters/`;return this.http.get(url).pipe((0,map.U)((entries=>entries.map((entry=>this.parseOverviewEntity(entry))))))}getNonPlayerCharacters(campaign){const url=`${this.baseUrl}/${campaign}/nonplayercharacters/`;return this.http.get(url).pipe((0,map.U)((entries=>entries.map((entry=>this.parseOverviewEntity(entry))))))}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,characterName=data.name;return()=>this.routingService.getRoutePath("character",{name:characterName,campaign:campaignName})}},character_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],character_service_class);var creature_service_class;CharacterService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],CharacterService);let CreatureService=(creature_service_class=class CreatureService extends BaseService{constructor(routingService,http){super(http,"creature"),this.routingService=routingService}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,creatureName=data.name;return()=>this.routingService.getRoutePath("creature",{name:creatureName,campaign:campaignName})}},creature_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],creature_service_class);var diaryentry_service_class;CreatureService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],CreatureService);let DiaryentryService=(diaryentry_service_class=class DiaryentryService extends BaseService{constructor(routingService,http){super(http,"diaryentry"),this.routingService=routingService}readByParam(campaign,params){const url=`${this.baseUrl}/${campaign}/${params.sessionNumber}/${params.isMainSession}/${params.authorName}/`;return this.http.get(url).pipe((0,map.U)((diaryEntry=>this.parseDiaryEntry(diaryEntry))))}parseDiaryEntry(entry){return{...entry,author:entry?.author_details?.pk,session:entry?.session_details?.pk}}parseEntity(data){return{...data,author:data?.author_details?.pk,session:data?.session_details?.pk,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,sessionNumber=data.session_details.session_number,isMainSession=data.session_details.is_main_session_int,authorName=data.author_details.name;return()=>this.routingService.getRoutePath("diaryentry",{sessionNumber,isMainSession,authorName,campaign:campaignName})}},diaryentry_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],diaryentry_service_class);DiaryentryService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],DiaryentryService);var encounter_service_class,encounter=__webpack_require__("./src/app/_models/encounter.ts");let EncounterService=(encounter_service_class=class EncounterService extends BaseService{constructor(routingService,http){super(http,"encounter"),this.routingService=routingService}getDiaryEntryEncounters(session_pk,authorName){const url=`${this.baseUrl}/session/${session_pk}/${authorName}`;return this.http.get(url).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}createForDiaryentry(encounter){const url=`${this.baseUrl}/`;return this.http.post(url,encounter).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}swapEncounterOrder(campaign,encounter1_pk,encounter2_pk){const url=`${this.baseUrl}/${campaign}/orderswap/`,requestBody={encounter1:encounter1_pk,encounter2:encounter2_pk};return this.http.patch(url,requestBody).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}cutInsertEncounter(campaign,encounter,newOrderIndex){const url=`${this.baseUrl}/${campaign}/cutinsert/`,requestBody={encounter:encounter.pk,old_order_index:encounter.order_index,new_order_index:newOrderIndex};return this.http.patch(url,requestBody).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}parseEntity(data){return new encounter.o({...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)})}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,sessionNumber=data.diaryentry_details.session_number,isMainSession=data.diaryentry_details.is_main_session,authorName=data.diaryentry_details.author_name,encounterTitle=data.title;return()=>this.routingService.getRoutePath("diaryentry-encounter",{sessionNumber,isMainSession,authorName,campaign:campaignName,encounterTitle})}},encounter_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],encounter_service_class);var item_service_class;EncounterService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],EncounterService);let ItemService=(item_service_class=class ItemService extends BaseService{constructor(routingService,http){super(http,"item"),this.routingService=routingService}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,itemName=data.name;return()=>this.routingService.getRoutePath("item",{name:itemName,campaign:campaignName})}},item_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],item_service_class);var location_service_class;ItemService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],ItemService);let LocationService=(location_service_class=class LocationService extends BaseService{constructor(routingService,http){super(http,"location"),this.routingService=routingService}readByParam(campaign,params){const url=`${this.baseUrl}/${campaign}/${params.parentLocationName}/${params.locationName}/`;return this.http.get(url).pipe((0,map.U)((data=>this.parseEntity(data))))}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data),getAbsoluteRouterUrlForParentLocation:this.generateParentLocationUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,locationName=data.name,parentLocationName=data.parent_location_details.name??"NONE";return()=>this.routingService.getRoutePath("location",{name:locationName,parent_name:parentLocationName,campaign:campaignName})}generateParentLocationUrlCallback(data){if(!(null!=data.parent_location_details))return null;const campaignName=data.campaign_details.name,parentLocationName=data.parent_location_details.name,grandParentLocationName=data.parent_location_details.parent_location??"NONE";return()=>this.routingService.getRoutePath("location",{name:parentLocationName,parent_name:grandParentLocationName,campaign:campaignName})}},location_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],location_service_class);function convertSingleFileModelToFormData(model,fileAttributeName="file"){if(!model.hasOwnProperty(fileAttributeName))throw`Can't convert object to FormData! Your model does not have a ${fileAttributeName} property!`;if(!model[fileAttributeName][0])throw`Can't convert object to FormData! Your model's ${fileAttributeName} has no file!`;const formData=new FormData;for(var key in model)key===fileAttributeName?formData.append(key,model[fileAttributeName][0]):model[key]&&formData.append(key,model[key]);return formData}var map_service_class;LocationService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],LocationService);let MapService=(map_service_class=class MapService extends BaseService{constructor(routingService,http){super(http,"map"),this.routingService=routingService}create(map){const formData=convertSingleFileModelToFormData(map,"image");return this.http.post(`${this.baseUrl}/`,formData)}patch(mapPk,map){let formData;return"FileList"===map.image?.constructor.name?formData=convertSingleFileModelToFormData(map,"image"):(delete map.image,formData=map),this.http.patch(`${this.baseUrl}/pk/${mapPk}/`,formData)}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,mapName=data.name;return()=>this.routingService.getRoutePath("map",{name:mapName,campaign:campaignName})}},map_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],map_service_class);var marker_type_service_class;MapService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],MapService);let MarkerTypeService=(marker_type_service_class=class MarkerTypeService extends BaseService{constructor(http){super(http,"markertype")}parseEntity(data){return data}parseOverviewEntity(data){return data}},marker_type_service_class.ctorParameters=()=>[{type:http.eN}],marker_type_service_class);MarkerTypeService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],MarkerTypeService);var marker_service_class;__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/pipe.js");let MarkerService=(marker_service_class=class MarkerService extends BaseService{constructor(routingService,http){super(http,"marker"),this.routingService=routingService}readByParam(campaign,param){const url=`${this.baseUrl}/${campaign}/${param.parentLocationName}/${param.locationName}/${param.mapName}`;return this.http.get(url)}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,location_name=data.name??data.location_details.name,map_name=data.map_details?.name??data.map,parent_location_name=data.parent_location_name??data.parent_location_details?.name??data.location_details.parent_location_name;return()=>this.routingService.getRoutePath("marker",{parent_location_name,location_name,map_name,campaign:campaignName})}},marker_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],marker_service_class);var organization_service_class;MarkerService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],MarkerService);let OrganizationService=(organization_service_class=class OrganizationService extends BaseService{constructor(routingService,http){super(http,"organization"),this.routingService=routingService}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,organizationName=data.name;return()=>this.routingService.getRoutePath("organization",{name:organizationName,campaign:campaignName})}},organization_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],organization_service_class);var quest_service_class;OrganizationService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],OrganizationService);let QuestService=(quest_service_class=class QuestService extends BaseService{constructor(routingService,characterService,http){super(http,"quest"),this.routingService=routingService,this.characterService=characterService}getQuestStates(){return this.http.get(`${this.baseUrl}/states`)}getQuestTakers(campaign){return this.characterService.getPlayerCharacters(campaign).pipe((0,map.U)((characters=>{const groupAsQuestTaker={name:"Group",name_full:"Group",pk:void 0,article_type:"quest"};return characters.unshift(groupAsQuestTaker),characters})))}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,questName=data.name;return()=>this.routingService.getRoutePath("quest",{name:questName,campaign:campaignName})}},quest_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:CharacterService},{type:http.eN}],quest_service_class);var quote_service_class;QuestService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QuestService);let QuoteService=(quote_service_class=class QuoteService extends BaseService{constructor(http){super(http,"quote")}getQuotes(campaign,character_name){return this.http.get(`${this.baseUrl}/${campaign}/${character_name}/`).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}getRandomQuote(campaign,character_name){return this.http.get(`${this.baseUrl}/${campaign}/${character_name}/random/`).pipe((0,map.U)((entry=>this.parseEntity(entry))))}getAllCharacterQuotes(campaign,character_name){return this.http.get(`${this.baseUrl}/${campaign}/${character_name}/`).pipe((0,map.U)((entries=>entries.map((entry=>this.parseEntity(entry))))))}parseEntity(data){return data}parseOverviewEntity(data){throw"Overview types are not implemented for Quotes"}},quote_service_class.ctorParameters=()=>[{type:http.eN}],quote_service_class);var rule_service_class;QuoteService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],QuoteService);let RuleService=(rule_service_class=class RuleService extends BaseService{constructor(routingService,http){super(http,"rule"),this.routingService=routingService}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,ruleName=data.name;return()=>this.routingService.getRoutePath("rule",{name:ruleName,campaign:campaignName})}},rule_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],rule_service_class);var session_audio_service_class;RuleService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],RuleService);let SessionAudioService=((session_audio_service_class=class SessionAudioService extends BaseService{constructor(routingService,http){super(http,"sessionaudio"),this.routingService=routingService,this.UPLOAD_URL=`${this.apiUrl}/uploads`}readByParam(campaign,params){const url=`${this.baseUrl}/${campaign}/${params.isMainSession}/${params.sessionNumber}/`;return this.http.get(url).pipe((0,map.U)((entry=>this.parseEntity(entry))))}uploadFile(fileName,file){const headers=new http.WM({"ngsw-bypass":"true","X-Progress-ID":fileName});return this.http.post(`${this.UPLOAD_URL}/${fileName}`,file,{reportProgress:!0,observe:"events",headers})}update(audioPk,sessionAudioModel){const url=`${this.baseUrl}/pk/${audioPk}/`,formData=convertSingleFileModelToFormData(sessionAudioModel,"audio_file"),headers=new http.WM({"ngsw-bypass":"true"});return this.http.put(url,formData,{headers,observe:"events",reportProgress:!0})}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,isMainSession=data.session_details.is_main_session_int,sessionNumber=data.session_details.session_number;return()=>this.routingService.getRoutePath("sessionaudio",{campaign:campaignName,isMainSession,sessionNumber})}}).ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],session_audio_service_class);var session_service_class;SessionAudioService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SessionAudioService);let SessionService=(session_service_class=class SessionService extends BaseService{constructor(routingService,http){super(http,"session"),this.routingService=routingService}getSession(sessionNumber,isMainSession){return"boolean"==typeof isMainSession&&(isMainSession=isMainSession?1:0),this.http.get(`${this.baseUrl}/${sessionNumber}/${isMainSession}`)}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name;return()=>this.routingService.getRoutePath("sessions",{campaign:campaignName})}},session_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],session_service_class);var spell_service_class;SessionService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SessionService);let SpellService=(spell_service_class=class SpellService extends BaseService{constructor(routingService,http){super(http,"spell"),this.routingService=routingService}parseEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}parseOverviewEntity(data){return{...data,getAbsoluteRouterUrl:this.generateUrlCallback(data)}}generateUrlCallback(data){const campaignName=data.campaign_details.name,spellName=data.name;return()=>this.routingService.getRoutePath("spell",{name:spellName,campaign:campaignName})}},spell_service_class.ctorParameters=()=>[{type:routing_service.Z},{type:http.eN}],spell_service_class);var CampaignRole,token_service_class,TokenService_1;SpellService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],SpellService),function(CampaignRole){CampaignRole.MEMBER="member",CampaignRole.ADMIN="admin",CampaignRole.GUEST="guest",CampaignRole.GLOBALGUEST="globalguest",CampaignRole.GLOBALMEMBER="globalmember"}(CampaignRole||(CampaignRole={}));let TokenService=((token_service_class=class TokenService{constructor(http){this.http=http,this.apiUrl=environment.apiUrl,this.jwtTokenUrl=`${this.apiUrl}/token`,this.refreshTokenUrl=`${this.apiUrl}/refresh`,this.ID_IDENTIFIER_PREFIX="id_"}login(userModel){const loginData={username:userModel.username,password:userModel.password};return this.http.post(this.jwtTokenUrl,loginData)}refreshUserData(){const refreshToken=TokenService_1.getRefreshToken().token,httpHeaders=(new http.WM).set("Authorization",`Bearer ${refreshToken}`);return this.http.post(this.refreshTokenUrl,{refresh:refreshToken},{headers:httpHeaders})}invalidateJWTToken(){}static getUserData(){const rawUserData=localStorage.getItem(TokenService_1.USER_DATA_KEY);return JSON.parse(rawUserData)}hasTokens(){return null!=TokenService_1.getUserData()&&(!!TokenService_1.getAccessToken()&&!!TokenService_1.getRefreshToken())}hasValidJWTToken(){return!!this.hasTokens()&&!this.isTokenExpired(TokenService_1.getRefreshToken())}static getAccessToken(){return this.getUserData().accessToken}static getRefreshToken(){return this.getUserData().refreshToken}setUserData(data){localStorage.setItem(TokenService_1.USER_DATA_KEY,JSON.stringify(data))}removeJWTTokenFromLocalStorage(){localStorage.removeItem(TokenService_1.USER_DATA_KEY)}getCurrentUserPk(){return TokenService_1.getUserData().userId}isAdmin(){const data=TokenService_1.getUserData();return null!=data&&data.isAdmin}isSuperUser(){const data=TokenService_1.getUserData();return null!=data&&data.isSuperUser}getCurrentUserName(){return TokenService_1.getUserData()?.userName}isCampaignMember(campaignName){const role=this.getCampaignRole(campaignName);return null!=role&&(this.isSuperUser()||this.isAdmin()||role===CampaignRole.MEMBER||role===CampaignRole.ADMIN)}isCampaignAdmin(campaignName){return this.isSuperUser()||this.isAdmin()||this.getCampaignRole(campaignName)===CampaignRole.ADMIN}isCampaignGuest(campaignName){return this.isSuperUser()||this.isAdmin()||this.getCampaignRole(campaignName)===CampaignRole.GUEST}getCampaignRole(campaignName){if(null==campaignName)return;const memberships=this.getCampaignMemberships();if(null==memberships)return;const role=memberships[campaignName.toLowerCase()];return CampaignRole[role?.toUpperCase()]}getCampaignMemberships(){const data=TokenService_1.getUserData(),campaignMemberships={};for(const campaignIdentifier of Object.keys(data.campaignMemberships)){campaignIdentifier.startsWith(this.ID_IDENTIFIER_PREFIX)||(campaignMemberships[campaignIdentifier.toLowerCase()]=data.campaignMemberships[campaignIdentifier])}return campaignMemberships}isAccessTokenExpired(){return this.isTokenExpired(TokenService_1.getAccessToken())}isRefreshTokenExpired(){return this.isTokenExpired(TokenService_1.getRefreshToken())}isTokenExpired(token){const expiryTimestamp=token.exp,currentTimestamp=Math.floor((new Date).getTime()/1e3),isExpired=currentTimestamp>=expiryTimestamp;return isExpired&&console.log(`${token.type} Token is expired. Request timestamp: ${new Date(1e3*currentTimestamp).toString()}. Token expiry timestamp: ${new Date(1e3*expiryTimestamp).toString()}`),isExpired}}).USER_DATA_KEY="user_data",token_service_class.ctorParameters=()=>[{type:http.eN}],TokenService_1=token_service_class);var user_service_class;TokenService=TokenService_1=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],TokenService);let UserService=(user_service_class=class UserService extends BaseService{constructor(http,tokenService){super(http,"user"),this.tokenService=tokenService}updateUserGroups(user){const data={groups:user.groups};return this.http.patch(`${this.baseUrl}/pk/${user.pk}/`,data)}updateUserAdminState(user){const data={is_staff:user.is_staff,is_superuser:user.is_superuser};return this.http.patch(`${this.baseUrl}/pk/${user.pk}/`,data)}patchUser(userPk,data){return this.http.patch(`${this.baseUrl}/pk/${userPk}/`,data)}getThisUser(){const userPk=this.tokenService.getCurrentUserPk(),url=`${this.baseUrl}/pk/${userPk}/`;return this.http.get(url)}parseEntity(data){return data}parseOverviewEntity(data){throw"Overview stuff is not implemented for Users"}},user_service_class.ctorParameters=()=>[{type:http.eN},{type:TokenService}],user_service_class);var overview_service_class;UserService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],UserService);let OverviewService=((overview_service_class=class OverviewService{constructor(characterService,creatureService,diaryentryService,encounterService,itemService,locationService,mapService,markerService,markerTypeService,organizationService,questService,ruleService,sessionService,sessionaudioService,spellService,quoteService,userService){this.characterService=characterService,this.creatureService=creatureService,this.diaryentryService=diaryentryService,this.encounterService=encounterService,this.itemService=itemService,this.locationService=locationService,this.mapService=mapService,this.markerService=markerService,this.markerTypeService=markerTypeService,this.organizationService=organizationService,this.questService=questService,this.ruleService=ruleService,this.sessionService=sessionService,this.sessionaudioService=sessionaudioService,this.spellService=spellService,this.quoteService=quoteService,this.userService=userService,this.apiUrl=environment.apiUrl,this.overviewServiceMapping={CHARACTER:this.characterService,CREATURE:this.creatureService,DIARYENTRY:this.diaryentryService,ENCOUNTER:this.encounterService,ITEM:this.itemService,LOCATION:this.locationService,MAP:this.mapService,MARKER_TYPE_TYPE:this.markerTypeService,MARKER_TYPE:this.markerService,ORGANIZATION:this.organizationService,QUEST:this.questService,QUOTE:this.quoteService,RULE:this.ruleService,SESSION:this.sessionService,SESSIONAUDIO:this.sessionaudioService,SPELL:this.spellService,USER:this.userService}}getCampaignOverviewItems(campaign,overviewType,sortProperty){let overviewItemObservable=this.overviewServiceMapping[overviewType].campaignList(campaign);return null!=sortProperty&&(overviewItemObservable=overviewItemObservable.pipe((0,map.U)((items=>this.sortByProperty(items,sortProperty))))),overviewItemObservable}getAllOverviewItems(overviewType,sortProperty){let overviewItemObservable=this.overviewServiceMapping[overviewType].list();return null!=sortProperty&&(overviewItemObservable=overviewItemObservable.pipe((0,map.U)((items=>this.sortByProperty(items,sortProperty))))),overviewItemObservable}sortByProperty(list,propertyName){const isInverseSort=propertyName.startsWith("-");isInverseSort&&(propertyName=this.removeInversionPrefix(propertyName));return list.sort(((item1,item2)=>{const isStringSortVal="string"==typeof item1[propertyName];let inCorrectOrder=(isStringSortVal?item1[propertyName].toLowerCase():item1[propertyName])<(isStringSortVal?item2[propertyName].toLowerCase():item2[propertyName]);return isInverseSort&&(inCorrectOrder=!inCorrectOrder),inCorrectOrder?-1:1}))}removeInversionPrefix(str){return str.substring(1)}}).ctorParameters=()=>[{type:CharacterService},{type:CreatureService},{type:DiaryentryService},{type:EncounterService},{type:ItemService},{type:LocationService},{type:MapService},{type:MarkerService},{type:MarkerTypeService},{type:OrganizationService},{type:QuestService},{type:RuleService},{type:SessionService},{type:SessionAudioService},{type:SpellService},{type:QuoteService},{type:UserService}],overview_service_class);var formly_service_service_class;OverviewService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],OverviewService);let FormlyService=((formly_service_service_class=class FormlyService{constructor(overviewService){this.overviewService=overviewService}buildOverviewSelectConfig(config){const options$=this.getOverviewItems(config),validators=this.getValidators(config);return{key:config.key,type:"select",className:config.className,wrappers:config.wrappers,hideExpression:config.hide,props:{label:config.label??this.capitalizeFirstLetter(config.key),labelProp:config.labelProp,valueProp:config.valueProp??"pk",options:options$,required:config.required??!0,disabled:config.disabled},validators:{validation:validators}}}buildDisableSelectConfig(config){const options$=this.getOverviewItems(config),validators=this.getValidators(config);return{key:config.key,type:"select-disable",className:config.className,wrappers:config.wrappers,hideExpression:config.hide??!1,props:{label:config.label??this.capitalizeFirstLetter(config.key),labelProp:config.labelProp,valueProp:config.valueProp??"pk",options:options$,required:config.required??!0,disabledExpression:config.disabledExpression,tooltipMessage:config.tooltipMessage,warningMessage:config.warningMessage,additionalProperties:{showWrapperLabel:config.showWrapperLabel??!0}},validators:{validation:validators}}}buildStaticSelectConfig(config){const validators=this.getValidators(config);return{key:config.key,type:"select",className:config.className,wrappers:config.wrappers,hideExpression:config.hide??!1,props:{label:config.label??this.capitalizeFirstLetter(config.key),options:config.options,required:config.required??!0,disabled:config.disabled},validators:{validation:validators}}}buildStaticStringSelectConfig(partialConfig){let options=partialConfig.options.map((str=>({label:str,value:str})));const config={...partialConfig,options};return this.buildStaticSelectConfig(config)}buildInputConfig(config){const validators=this.getValidators(config);let innerInputType;if("NUMBER"===config.inputKind&&validators.push("notInteger"),"NAME"===config.inputKind&&validators.push("hasSpecialCharacters"),"NUMBER"===config.inputKind)innerInputType="number";else innerInputType="string";return{key:config.key,type:"input",className:config.className,wrappers:config.wrappers,hideExpression:config.hide??!1,parsers:config.parsers,props:{maxLength:config.maxLength,minLength:config.minLength,label:config.label??this.capitalizeFirstLetter(config.key),type:innerInputType,required:config.required??!0,disabled:!!config.disabled,placeholder:config.placeholder??void 0},validators:{validation:validators}}}buildSinglePasswordConfig(config){const validators=this.getValidators(config);return{key:config.key,type:"input",className:config.className,fieldGroupClassName:config.fieldGroupClassName,templateOptions:{label:config.label??"Password",type:"password",required:!0,placeholder:"Your password",disabled:config.disabled},validators:{validation:validators}}}buildConfirmedPasswordConfig(config){const validators=config.validators??[];validators.push("required");return{validators:{validation:[{name:"fieldMatch",options:{errorPath:"passwordConfirm"}}]},fieldGroup:[{key:"password",type:"input",className:config.className,templateOptions:{label:config.label??"Password",type:"password",required:!0,placeholder:"Password, at least 7 characters",disabled:config.disabled},validators:{validation:validators}},{key:"passwordConfirm",type:"input",className:config.className,templateOptions:{label:config.label?"Confirm "+config.label:"Password Confirmation",type:"password",required:!0,placeholder:"Please re-enter your password",disabled:config.disabled}}]}}buildCheckboxConfig(config){return{key:config.key,type:"checkbox",className:config.className,wrappers:config.wrappers,defaultValue:config.defaultValue,hideExpression:config.hide,props:{label:config.label??this.capitalizeFirstLetter(config.key),required:config.required??!0,disabled:config.disabled}}}buildDatepickerConfig(config){const validators=this.getValidators(config);return validators.push("date"),{key:config.key,type:"datepicker",className:config.className,wrappers:config.wrappers,hideExpression:config.hide,props:{label:config.label??this.capitalizeFirstLetter(config.key),required:config.required??!0,disabled:config.disabled},validators:{validation:validators}}}buildFileFieldConfig(config){const validators=this.getValidators(config);return{key:config.key,type:"file",className:config.className,wrappers:config.wrappers,hideExpression:config.hide,props:{buttonType:config.fileButtonType??"SECONDARY",fileFieldKind:config.fileFieldKind??"IMAGE",label:config.label??this.capitalizeFirstLetter(config.key),required:config.required??!0,disabled:!!config.disabled},validators:{validation:validators}}}buildEditorConfig(config){const validators=this.getValidators(config);return{key:config.key,type:"text-editor",className:config.className,wrappers:config.wrappers,hideExpression:config.hide,props:{label:config.label??this.capitalizeFirstLetter(config.key),required:config.required??!0,disabled:config.disabled},validators:{validation:validators}}}toUpdateForm(fields){return fields.filter((field=>!("file"===field.type)))}getValidators(config){const validators=config.validators??[];return config.required&&validators.push("required"),validators}getOverviewItems(config){const isCampaignSpecific=null!=config.campaign,sortProp=config.sortProp;let options=isCampaignSpecific?this.overviewService.getCampaignOverviewItems(config.campaign,config.overviewType,sortProp):this.overviewService.getAllOverviewItems(config.overviewType,sortProp);return config.required||(options=this.addEmptyOption(options,config)),options}addEmptyOption(observable,config){return observable.pipe((0,map.U)((values=>[this.createEmptyOption(config),...values])))}createEmptyOption(config){const emptyOption={};emptyOption[config.key]="------";return emptyOption[config.valueProp??config.key]=null,emptyOption}capitalizeFirstLetter(s){return s.charAt(0).toUpperCase()+s.slice(1)}}).ctorParameters=()=>[{type:OverviewService}],formly_service_service_class);FormlyService=(0,tslib_es6.gn)([(0,core.Injectable)({providedIn:"root"})],FormlyService)},"./src/app/_services/routing.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>RoutingService});var _class,tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_angular_router__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs");let RoutingService=((_class=class RoutingService{constructor(router){this.router=router,this.NONE_STRING="None",this.router.routeReuseStrategy.shouldReuseRoute=()=>!1}routeToPath(routeName,params={}){const routePath=this.getRoutePath(routeName,params),cleanedObjectUrl=this.replaceSpecialUnicodeCharacters(routePath);this.router.navigateByUrl(cleanedObjectUrl)}getRoutePath(routeName,params={}){return"Dummy/url"}routeToErrorPage(error){if("number"!=typeof error&&!error.hasOwnProperty("status"))throw"Incorrect error input. The input does not contain an error status or an object with the error status. Can not route to error page without error status.";"number"!=typeof error&&error.hasOwnProperty("status")&&(error=error.status);const errorStatusParam=`${error}`;this.routeToPath("error",{errorStatus:errorStatusParam})}routeNameMatches(route,routeName){return route.snapshot.data.name===routeName}replaceSpecialUnicodeCharacters(routePath){return routePath.replace("(","%28").replace(")","%29").replace("?","?").replace("†","%E2%80%A0")}getVariableRouteByName(routeName){const routesWithRouteName=this.getRoutesWithName(routeName);switch(routesWithRouteName.length){case 1:return routesWithRouteName[0];case 0:throw`There is no route with the name ${routeName}. Please contact the Developer to use either a different route name or create a route for this name.`;default:throw`There is more than 1 route with the name ${routeName}. Please contact the Developer to ensure all routes have unique names.`}}getVariableRoutePathByName(routeName){return this.getVariableRouteByName(routeName).path}hasPathVariables(routePath){return routePath.includes("/:")}hasRoutePath(routeName){return this.getRoutesWithName(routeName).length>0}getRoutesWithName(routeName){return this.router.config.filter((pathObject=>{const routeData=pathObject.data;return null!=routeData&&routeData.name===routeName}))}getPathVariableNames(routePath){const pathVariables=routePath.split("/").filter((segment=>segment.startsWith(":")));return pathVariables.map((segment=>segment.slice(1)))}}).ctorParameters=()=>[{type:_angular_router__WEBPACK_IMPORTED_MODULE_0__.F0}],_class);RoutingService=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({providedIn:"root"})],RoutingService)}}]);