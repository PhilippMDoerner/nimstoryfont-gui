(self.webpackChunknimstoryfont_gui=self.webpackChunknimstoryfont_gui||[]).push([[7611],{"./src/app/design/organisms/ngx-leaflet-map/ngx-leaflet-map.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _asymmetrik_ngx_leaflet__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@asymmetrik/ngx-leaflet/fesm2020/asymmetrik-ngx-leaflet.mjs"),_storybook_angular__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),src_app_design_molecules__WEBPACK_IMPORTED_MODULE_2__=(__webpack_require__("./node_modules/leaflet/dist/leaflet-src.js"),__webpack_require__("./src/app/design/molecules/index.ts")),_design_atoms__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/app/design/atoms/index.ts");const dummyMap={getAbsoluteRouterUrl:()=>"/map/url",pk:2,name:"The World",image:"/media/Aldrune_World_1.jpg",icon:"/media/globe",update_datetime:"2021-06-26T17:10:35.352119Z",campaign:1,campaign_details:{name:"Aldrune",pk:1},markers:[{getAbsoluteRouterUrl:()=>"/marker1/url",pk:106,color:void 0,icon:void 0,longitude:532,latitude:553,map:2,map_details:{name:"The World"},location:50,location_details:{name:"Galway",description:"<p>The New Capital of Fen's High Kingdom</p>\n<p>&nbsp;</p>\n<p>Galway City Breakdown</p>\n<p>Eastern Lakeway - 15 Buildings<br />Western Lakeway - 40 Buildings<br />Myria Island - 7 Buildings<br />River District - 46 Buildings, several temporary Refugee Shelters<br />Forest District - 85 Buildings<br />Hill District - 149 Buildings<br />Galway Proper - 60 Buildings</p>\n<p>Total - 402 Civilian Buildings in Galway</p>\n<p>Estimated Population: 4000+</p>",parent_location_name:"none",sublocations:[]},type:11,type_details:{name:"Settlement",icon:"home",is_text_marker:!1,fontawesome_type:"fa",color:"lightgreen",pk:11},campaign_details:{name:"Aldrune",id:1}},{getAbsoluteRouterUrl:()=>"/marker2/url",pk:137,color:void 0,icon:void 0,longitude:752,latitude:579,map:2,map_details:{name:"The World"},location:206,location_details:{name:"Eastern sea",description:"<p>The ocean east of Aldrune, now accessible through the path carved by the world serpent.</p>",parent_location_name:"none",sublocations:["Lighthouse"]},type:23,type_details:{name:"Sea/Ocean",icon:"water",is_text_marker:!0,fontawesome_type:"fa",color:"gray",pk:23},campaign_details:{name:"Aldrune",id:1}}]},__WEBPACK_DEFAULT_EXPORT__={title:"DesignSystem/Organisms/NgxLeafletMapComponent",component:__webpack_require__("./src/app/design/organisms/ngx-leaflet-map/ngx-leaflet-map.component.ts").P,decorators:[(0,_storybook_angular__WEBPACK_IMPORTED_MODULE_0__.moduleMetadata)({imports:[_design_atoms__WEBPACK_IMPORTED_MODULE_3__.cg,src_app_design_molecules__WEBPACK_IMPORTED_MODULE_2__._V,_asymmetrik_ngx_leaflet__WEBPACK_IMPORTED_MODULE_5__.UO],declarations:[]})],args:{mapData:dummyMap,serverUrl:"https://www.aldrune.com"}},Default=(args=>({props:{...args}})).bind({});Default.args={}},"./src/app/_services/routing.service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Z:()=>RoutingService});var _class,tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.js"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),_angular_router__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/router/fesm2020/router.mjs");let RoutingService=((_class=class RoutingService{constructor(router){this.router=router,this.NONE_STRING="None",this.router.routeReuseStrategy.shouldReuseRoute=()=>!1}routeToPath(routeName,params={}){const routePath=this.getRoutePath(routeName,params),cleanedObjectUrl=this.replaceSpecialUnicodeCharacters(routePath);this.router.navigateByUrl(cleanedObjectUrl)}getRoutePath(routeName,params={}){return"Dummy/url"}routeToErrorPage(error){if("number"!=typeof error&&!error.hasOwnProperty("status"))throw"Incorrect error input. The input does not contain an error status or an object with the error status. Can not route to error page without error status.";"number"!=typeof error&&error.hasOwnProperty("status")&&(error=error.status);const errorStatusParam=`${error}`;this.routeToPath("error",{errorStatus:errorStatusParam})}routeNameMatches(route,routeName){return route.snapshot.data.name===routeName}replaceSpecialUnicodeCharacters(routePath){return routePath.replace("(","%28").replace(")","%29").replace("?","?").replace("â€ ","%E2%80%A0")}getVariableRouteByName(routeName){const routesWithRouteName=this.getRoutesWithName(routeName);switch(routesWithRouteName.length){case 1:return routesWithRouteName[0];case 0:throw`There is no route with the name ${routeName}. Please contact the Developer to use either a different route name or create a route for this name.`;default:throw`There is more than 1 route with the name ${routeName}. Please contact the Developer to ensure all routes have unique names.`}}getVariableRoutePathByName(routeName){return this.getVariableRouteByName(routeName).path}hasPathVariables(routePath){return routePath.includes("/:")}hasRoutePath(routeName){return this.getRoutesWithName(routeName).length>0}getRoutesWithName(routeName){return this.router.config.filter((pathObject=>{const routeData=pathObject.data;return null!=routeData&&routeData.name===routeName}))}getPathVariableNames(routePath){const pathVariables=routePath.split("/").filter((segment=>segment.startsWith(":")));return pathVariables.map((segment=>segment.slice(1)))}}).ctorParameters=()=>[{type:_angular_router__WEBPACK_IMPORTED_MODULE_0__.F0}],_class);RoutingService=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.gn)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Injectable)({providedIn:"root"})],RoutingService)},"./src/app/design/organisms/ngx-leaflet-map/ngx-leaflet-map.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{P:()=>NgxLeafletMapComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var _class,ngx_leaflet_map_componentngResource=__webpack_require__("./src/app/design/organisms/ngx-leaflet-map/ngx-leaflet-map.component.scss?ngResource"),ngx_leaflet_map_componentngResource_default=__webpack_require__.n(ngx_leaflet_map_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),leaflet_src=__webpack_require__("./node_modules/leaflet/dist/leaflet-src.js"),routing_service=__webpack_require__("./src/app/_services/routing.service.ts");let NgxLeafletMapComponent=((_class=class NgxLeafletMapComponent{constructor(routingService){this.routingService=routingService,this.BRIGHT_BG_COLORS=["beige","lightgreen"],this.MAP_BOUNDS=[[200,140],[800,1160]],this.hideCoordinatesState=!0}ngOnInit(){this.options=this.initOptions(),this.markerLayers=this.initMarkerLayers(this.mapData),this.layersControl=this.initLayersControl(),this.layers=this.initLayers(this.serverUrl,this.mapData)}onMapReady(map){this.leafletMap=map,this.leafletMap.fitBounds(this.MAP_BOUNDS);for(const layerName in this.markerLayers)this.markerLayers[layerName].addTo(this.leafletMap)}initOptions(){return{minZoom:-1,maxZoom:2,crs:leaflet_src.CRS.Simple}}initLayers(serverUrl,map){const mapImageUrl=serverUrl+map.image;return[(0,leaflet_src.imageOverlay)(mapImageUrl,this.MAP_BOUNDS)]}initLayersControl(){return{baseLayers:{},overlays:{...this.markerLayers},options:{collapsed:!1}}}initMarkerLayers(map){const layers={};if(!(map.markers&&map.markers.length>0))return layers;for(const mapMarker of map.markers??[]){const layerName=mapMarker.type_details?.name,layer=layerName&&layers.hasOwnProperty(layerName)?layers[layerName]:(0,leaflet_src.layerGroup)();layers[layerName]=layer;(mapMarker.type_details?.is_text_marker?this.createTextMarker(mapMarker):this.createAwesomeMarker(mapMarker)).addTo(layer)}return layers}onMouseMove(event){this.mouseLatitude=event.latlng.lat,this.mouseLongitude=event.latlng.lng}onMapClick(event){const latitude=event.latlng.lat,longitude=event.latlng.lng,popupContentHTML=this.makeFreePopupContentHTML(longitude,latitude);(0,leaflet_src.popup)().setLatLng([latitude,longitude]).setContent(popupContentHTML).openOn(this.leafletMap)}createTextMarker(mapMarker){const markerColor=this.getMarkerColor(mapMarker),textColor=this.getTextColor(markerColor),locationName=mapMarker.location_details?.name;return(0,leaflet_src.marker)([mapMarker.latitude,mapMarker.longitude],{icon:(0,leaflet_src.divIcon)({html:`\n        <div class="leaflet-text-marker" style="background-color: ${markerColor}; color: ${textColor}">\n          <strong>${locationName}</strong>\n        </div>\n        `})}).bindPopup(this.getPopupText(mapMarker)).bindTooltip(locationName)}createAwesomeMarker(mapMarker){const locationName=mapMarker.location_details?.name;return(0,leaflet_src.marker)([mapMarker.latitude,mapMarker.longitude],{icon:this.createDivIcon(mapMarker)}).bindPopup(this.getPopupText(mapMarker)).bindTooltip(locationName)}getMarkerColor(marker){return marker.color?marker.color:marker.type_details?.color?marker.type_details.color:"grey"}getPopupText(marker){return`${this.makeLocationHeading(marker)} <br> ${this.makeLocationDescription(marker)} <br> ${this.makeSublocationList(marker)}`}makeLocationHeading(marker){return`<a href="${this.routingService.getRoutePath("location",{campaign:this.mapData.campaign_details?.name,parent_name:marker.location_details?.parent_location_name,name:marker.location_details?.name})}"> <b>${marker.location_details?.name}</b> </a>`}makeLocationDescription(marker){let description=marker.location_details?.description;if(null==description)return"";if(description.split(" ").length>=35){return`${description.split(" ").slice(0,35)} ...`}return description}makeSublocationList(marker){const location=marker.location_details;if(!(location?.sublocations&&location.sublocations.length>0))return"";let sublocationList=" <ul>";for(let sublocationName of location.sublocations){sublocationList+=`<li><a href="${this.routingService.getRoutePath("location",{parent_name:location.name,name:sublocationName,campaign:this.mapData.campaign_details?.name})}"> ${sublocationName}</a></li>`}return sublocationList+="</ul>",`<h5 class="popup-heading"> Locations of Interest: </h5> ${sublocationList}`}getTextColor(color){return this.BRIGHT_BG_COLORS.includes(color)?"black":"white"}createDivIcon(mapMarker){const typeIcon=mapMarker.type_details?.icon,fontawesome_type=mapMarker.type_details?.fontawesome_type,typeColor=mapMarker.type_details?.color,customColor=mapMarker.color,color=customColor||typeColor;return(0,leaflet_src.divIcon)({className:"custom-div-icon",html:`\n        <div style="background-color:${color};" class="marker-pin"></div>\n        <i class='d-flex justify-content-center ${fontawesome_type} fa-${typeIcon} awesome'></i>`,iconSize:[30,42],iconAnchor:[15,42]})}makeFreePopupContentHTML(longitude,latitude){return`\n      <div class="mb-2 pointer"> \n        <a href="${this.routingService.getRoutePath("marker-map-create",{latitude,longitude,map_name:this.mapData.name,campaign:this.mapData.campaign_details?.name})}">\n          <i class="fa fa-map-marker"></i> Add Marker\n        </a>\n      </div>\n\n      <div class="pointer"> \n        <a href="${this.routingService.getRoutePath("location-map-create",{latitude,longitude,map_name:this.mapData.name,campaign:this.mapData.campaign_details?.name})}">\n          <i class="fa fa-home"></i> Add Marker and Location\n        </a>\n      </div>\n    `}}).ctorParameters=()=>[{type:routing_service.Z}],_class.propDecorators={mapData:[{type:core.Input}],serverUrl:[{type:core.Input}]},_class);NgxLeafletMapComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"app-ngx-leaflet-map",template:'\x3c!-- Leaflet Map --\x3e\n<ng-container *ngIf="options && layersControl && layers">\n  <div \n    id="leafletMapDiv"\n    leaflet\n    [leafletOptions]="options"\n    [leafletLayersControl]="layersControl"\n    [leafletLayers]="layers"\n    (leafletMapReady)="onMapReady($event)"\n    (leafletClick)="onMapClick($event)"\n    (leafletMouseMove)="onMouseMove($event)"\n  ></div>\n</ng-container>\n\n',styles:[ngx_leaflet_map_componentngResource_default()]})],NgxLeafletMapComponent)},"./src/app/design/organisms/ngx-leaflet-map/ngx-leaflet-map.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".map-frame {\n  border: 2px solid black;\n  height: 600px;\n  width: 100%;\n  margin: 0 auto 2rem auto;\n}\n\n#leafletMapDiv {\n  height: 600px;\n  width: 100%;\n  margin: 0 auto;\n}\n\n.w-15 {\n  width: 15%;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()}}]);